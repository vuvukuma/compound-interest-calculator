{"version":3,"sources":["components/CalculatorHeader.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["CalculatorHeaderContainer","styled","div","CalculatorHeaderTitle","h1","CalculatorHeaderDescription","p","CalculatorHeader","Calculator","useState","principal","setPrincipal","annualInterestRate","setAnnualInterestRate","frequency","setFrequency","period","setPeriod","inputMixin","css","CalculatorContainer","CalculatorRow","CalculatorRowInput","input","CalculatorRowSelect","select","CalculatorRowLabel","label","CalculatorResultRow","getCompoundTotal","cycle","Math","pow","round","num","Number","EPSILON","htmlFor","name","type","value","onChange","e","target","toLocaleString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iiBAGA,IAAMA,EAA4BC,IAAOC,IAAV,KAGzBC,EAAwBF,IAAOG,GAAV,KAGrBC,EAA8BJ,IAAOK,EAAV,KAWlBC,EAPU,kBACrB,kBAACP,EAAD,KACI,kBAACG,EAAD,uCACA,kBAACE,EAAD,Q,ilCCqGOG,MAjHf,WAAuB,IAAD,EACgBC,mBAAS,KADzB,mBACXC,EADW,KACAC,EADA,OAEkCF,mBAAS,KAF3C,mBAEXG,EAFW,KAESC,EAFT,OAGgBJ,mBAAS,IAHzB,mBAGXK,EAHW,KAGAC,EAHA,OAIUN,mBAAS,GAJnB,mBAIXO,EAJW,KAIHC,EAJG,KAKZC,EAAaC,YAAH,KASVC,EAAsBnB,IAAOC,IAAV,KAQnBmB,EAAgBpB,IAAOC,IAAV,KAMboB,EAAqBrB,IAAOsB,MAAV,IAClBL,GAEAM,EAAsBvB,IAAOwB,OAAV,IACnBP,GAEAQ,EAAqBzB,IAAO0B,MAAV,KAGlBC,EAAsB3B,IAAOC,IAAV,KAKzB,SAAS2B,IACL,IAAMC,EAAQ,GAAKhB,EAEnB,OAAOJ,EAAYqB,KAAKC,IAAK,EAAKpB,EAAqB,IAAMkB,EAAUd,EAASc,GAOpF,SAASG,EAAMC,GACX,OAAOH,KAAKE,MAA+B,KAAxBC,EAAMC,OAAOC,UAAkB,IAGtD,OACI,kBAAChB,EAAD,KACI,kBAAC,EAAD,MACA,kBAACC,EAAD,KACI,kBAACK,EAAD,CAAoBW,QAAQ,aAA5B,6BACA,kBAACf,EAAD,CACIgB,KAAK,YACLC,KAAK,SACLC,MAAO9B,EACP+B,SAAU,SAACC,GAAD,OAAO/B,EAAa+B,EAAEC,OAAOH,WAG/C,kBAACnB,EAAD,KACI,kBAACK,EAAD,CAAoBW,QAAQ,sBAA5B,gCACA,kBAACf,EAAD,CACIgB,KAAK,qBACLC,KAAK,SACLC,MAAO5B,EACP6B,SAAU,SAACC,GAAD,OAAO7B,EAAsB6B,EAAEC,OAAOH,WAGxD,kBAACnB,EAAD,KACI,kBAACK,EAAD,CAAoBW,QAAQ,aAA5B,wCACA,kBAACb,EAAD,CACIc,KAAK,YACLE,MAAO1B,EACP2B,SAAU,SAACC,GAAD,OAAO3B,EAAa2B,EAAEC,OAAOH,SACvC,4BAAQA,MAAM,MAAd,uBACA,4BAAQA,MAAM,KAAd,0CACA,4BAAQA,MAAM,KAAd,0CACA,4BAAQA,MAAM,KAAd,yBAGR,kBAACnB,EAAD,KACI,kBAACK,EAAD,CAAoBW,QAAQ,UAA5B,yBACA,kBAACf,EAAD,CACIgB,KAAK,SACLC,KAAK,SACLC,MAAOxB,EACPyB,SAAU,SAACC,GAAD,OAAOzB,EAAUyB,EAAEC,OAAOH,WAG5C,kBAACnB,EAAD,KACI,kBAACO,EAAD,+CACa,gCAAUK,EAAMJ,KAAoBe,kBADjD,WAGA,kBAAChB,EAAD,uBACWlB,EAAUkC,iBADrB,WAGA,kBAAChB,EAAD,uBACWK,EAzDZJ,IAAqBnB,GAyDiBkC,iBADrC,cCrGDC,EALH,kBACV,kBAAC,EAAD,OCQkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f444811d.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst CalculatorHeaderContainer = styled.div`\n    padding-bottom: 12px;\n`;\nconst CalculatorHeaderTitle = styled.h1`\n    font-size: 32px;    \n`;\nconst CalculatorHeaderDescription = styled.p`\n    color: #75839F;\n`;\n\nconst CalculatorHeader = () => (\n    <CalculatorHeaderContainer>\n        <CalculatorHeaderTitle>복리계산기</CalculatorHeaderTitle>\n        <CalculatorHeaderDescription></CalculatorHeaderDescription>\n    </CalculatorHeaderContainer>\n)\n\nexport default CalculatorHeader\n","import React, {useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport CalculatorHeader from './CalculatorHeader';\n\nfunction Calculator() {\n    const [principal, setPrincipal] = useState(1000000);\n    const [annualInterestRate, setAnnualInterestRate] = useState(1.2);\n    const [frequency, setFrequency] = useState(12);\n    const [period, setPeriod] = useState(2);\n    const inputMixin = css`\n        height: 42px;\n        width: 100%;\n        border: 1px solid;\n        border-radius: 4px;\n        border-color: #2E3958;\n        padding: 0 8px;\n        font-size: 16px;\n    `;\n    const CalculatorContainer = styled.div`\n        display: flex;\n        flex-direction: column;\n        margin: 0 auto;\n        padding: 12px;\n        max-width: 400px;\n        text-align: center;\n    `;\n    const CalculatorRow = styled.div`\n        display: flex;\n        flex-direction: column;\n        text-align: left;\n        padding-bottom: 24px;\n    `;\n    const CalculatorRowInput = styled.input`\n        ${inputMixin}\n    `;\n    const CalculatorRowSelect = styled.select`\n        ${inputMixin}   \n    `;\n    const CalculatorRowLabel = styled.label`\n        padding-bottom: 4px;\n    `;\n    const CalculatorResultRow = styled.div`\n        padding-bottom : 8px;\n        text-align: right;\n    `;\n\n    function getCompoundTotal() {\n        const cycle = 12 / frequency;\n\n        return principal * Math.pow((1 + (annualInterestRate / 100 / cycle)), (period * cycle));\n    }\n    \n    function getTotalInterest() {\n        return getCompoundTotal() - principal;\n    }\n\n    function round(num) {\n        return Math.round((num + Number.EPSILON) * 100) / 100\n    }\n\n    return (\n        <CalculatorContainer>\n            <CalculatorHeader/>\n            <CalculatorRow>\n                <CalculatorRowLabel htmlFor=\"principal\">투자 원금</CalculatorRowLabel>\n                <CalculatorRowInput\n                    name=\"principal\" \n                    type=\"number\"\n                    value={principal}\n                    onChange={(e) => setPrincipal(e.target.value)}>\n                </CalculatorRowInput>\n            </CalculatorRow>\n            <CalculatorRow>\n                <CalculatorRowLabel htmlFor=\"annualInterestRate\">연 이자율(%)</CalculatorRowLabel>\n                <CalculatorRowInput \n                    name=\"annualInterestRate\" \n                    type=\"number\"\n                    value={annualInterestRate}\n                    onChange={(e) => setAnnualInterestRate(e.target.value)}>\n                </CalculatorRowInput>\n            </CalculatorRow>\n            <CalculatorRow>\n                <CalculatorRowLabel htmlFor=\"frequency\">복리계산빈도</CalculatorRowLabel>\n                <CalculatorRowSelect\n                    name=\"frequency\" \n                    value={frequency}\n                    onChange={(e) => setFrequency(e.target.value)}>\n                    <option value=\"12\">연 복리</option>\n                    <option value=\"6\">6개월 반기복리</option>\n                    <option value=\"3\">3개월 분기복리</option>\n                    <option value=\"1\">월 복리</option>\n                </CalculatorRowSelect>\n            </CalculatorRow>\n            <CalculatorRow>\n                <CalculatorRowLabel htmlFor=\"period\">기간 (년)</CalculatorRowLabel>\n                <CalculatorRowInput \n                    name=\"period\" \n                    type=\"number\"\n                    value={period}\n                    onChange={(e) => setPeriod(e.target.value)}>    \n                </CalculatorRowInput>\n            </CalculatorRow>\n            <CalculatorRow>\n                <CalculatorResultRow>\n                    만기지급금액 : <strong>{ round(getCompoundTotal()).toLocaleString() }</strong> 원\n                </CalculatorResultRow>\n                <CalculatorResultRow>\n                    원금 : { principal.toLocaleString() } 원\n                </CalculatorResultRow>\n                <CalculatorResultRow>\n                    이자 : { round(getTotalInterest()).toLocaleString() } 원\n                </CalculatorResultRow>\n            </CalculatorRow>\n        </CalculatorContainer>\n    );\n}\n\nexport default Calculator;","import React from 'react';\nimport Calculator from './components/Calculator'\n\nconst App = () => (\n  <Calculator>\n  </Calculator>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}