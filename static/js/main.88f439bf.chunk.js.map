{"version":3,"sources":["components/CalculatorHeader.tsx","components/CurrencySelector.tsx","components/Calculator.tsx","components/LanguageSelector.tsx","locales/index.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["CalculatorHeaderContainer","styled","div","CalculatorHeaderTitle","h1","CalculatorHeaderDescription","p","CalculatorHeader","defaultMessage","id","CurrencySelector","props","label","name","options","value","currency","onChange","handleChangeCurrency","CalculatorContainer","CalculatorRow","CalculatorRowLabel","CalculatorResultRow","frequencyOptionsLabelMessages","defineMessages","annual","semiannual","quarterly","monthly","Calculator","useState","principal","setPrincipal","annualInterestRate","setAnnualInterestRate","frequency","setFrequency","period","setPeriod","setCurrency","intl","useIntl","handlePrincipalChange","useCallback","handleAnnualInterestRateChange","handleFrequencyChange","handlePeriodChange","FrequencyOptions","formatMessage","parse","inputValue","Number","parseInt","getCompoundTotal","cycle","Math","pow","round","num","EPSILON","htmlFor","pattern","type","style","languageMessages","ko","en","LanguageSelector","LanguageOptions","lang","handleChangeLanguage","Messages","require","defaultMessages","Container","App","React","navigator","language","slice","setLang","locale","messages","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","i18n","enTranslations","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88f439bf.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { FormattedMessage } from 'react-intl';\n\nconst CalculatorHeaderContainer = styled.div`\n    text-align: left;\n    padding-bottom: 12px;\n`;\nconst CalculatorHeaderTitle = styled.h1`\n    display: block;\n    text-align: left;\n    height: 28px;\n    font-size: 21px;\n    font-weight: 400;\n    line-height: 28px;\n`;\nconst CalculatorHeaderDescription = styled.p`\n    padding-top: 16px;\n    color: #75839F;\n`;\n\nconst CalculatorHeader = () => (\n    <CalculatorHeaderContainer>\n        <CalculatorHeaderTitle>\n            <FormattedMessage defaultMessage=\"복리 계산기 📈\" id=\"calculator.header.title\"></FormattedMessage>\n        </CalculatorHeaderTitle>\n        <CalculatorHeaderDescription>\n            <FormattedMessage defaultMessage=\"이 계산기를 사용해서, 복리의 마법을 확인해 보세요! 🔮\" id=\"calculator.header.desc\"></FormattedMessage>\n        </CalculatorHeaderDescription>\n    </CalculatorHeaderContainer>\n)\n\nexport default CalculatorHeader\n","import React from 'react';\nimport { Select } from '@shopify/polaris';\n\ninterface CurrencySelectorProps {\n    currency: string | undefined;\n    handleChangeCurrency: ((selected: string) => void) | undefined;\n}\n\nconst CurrencySelector = (props: CurrencySelectorProps) => {\n    const CurrencyOptions = [\n        { label: '$', value: 'USD' },\n        { label: '₩', value: 'KRW' },\n        { label: '€', value: 'EUR' },\n    ]\n\n    return (\n        <Select\n            label=''\n            name=\"currency\"\n            options={CurrencyOptions}\n            value={props.currency}\n            onChange={props.handleChangeCurrency} />\n    )\n}\n\nexport default CurrencySelector;","import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport CalculatorHeader from './CalculatorHeader';\nimport CurrencySelector from './CurrencySelector';\nimport { TextField, Select } from '@shopify/polaris';\nimport { useIntl, defineMessages, FormattedMessage, FormattedNumber } from 'react-intl';\n\nconst CalculatorContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n`;\nconst CalculatorRow = styled.div`\n    display: flex;\n    flex-direction: column;\n    text-align: left;\n    padding-bottom: 24px;\n`;\nconst CalculatorRowLabel = styled.label`\n    padding-bottom: 4px;\n`;\nconst CalculatorResultRow = styled.div`\n    padding-bottom : 8px;\n    text-align: right;\n`;\n\nconst frequencyOptionsLabelMessages = defineMessages({\n    annual: {\n        id: 'calculator.input.frequency.annual',\n        defaultMessage: '연 복리',\n    },\n    semiannual: {\n        id: 'calculator.input.frequency.semiannual',\n        defaultMessage: '6개월 반기복리',\n    },\n    quarterly: {\n        id: 'calculator.input.frequency.quarterly',\n        defaultMessage: '3개월 분기복리',\n    },\n    monthly: {\n        id: 'calculator.input.frequency.monthly',\n        defaultMessage: '월 복리',\n    },\n});\n\nconst Calculator = () => {\n    const [principal, setPrincipal] = useState('1000000');\n    const [annualInterestRate, setAnnualInterestRate] = useState('2');\n    const [frequency, setFrequency] = useState('12');\n    const [period, setPeriod] = useState('12');\n    const [currency, setCurrency] = useState('USD');\n    const intl = useIntl();\n\n    const handlePrincipalChange = useCallback((value) => setPrincipal(value), []);\n    const handleAnnualInterestRateChange = useCallback((value) => setAnnualInterestRate(value), []);\n    const handleFrequencyChange = useCallback((value) => setFrequency(value), []);\n    const handlePeriodChange = useCallback((value) => setPeriod(value), []);\n\n    const FrequencyOptions = [\n        { label: intl.formatMessage(frequencyOptionsLabelMessages.annual), value: '12' },\n        { label: intl.formatMessage(frequencyOptionsLabelMessages.semiannual), value: '6' },\n        { label: intl.formatMessage(frequencyOptionsLabelMessages.quarterly), value: '3' },\n        { label: intl.formatMessage(frequencyOptionsLabelMessages.monthly), value: '1' },\n    ]\n\n    function parse(inputValue: string): number {\n        return Number.parseInt(inputValue, 10);\n    }\n\n    function getCompoundTotal() {\n        const cycle: number = 12 / parse(frequency);\n\n        return parse(principal) * Math.pow((1 + parse(annualInterestRate) / 100 / cycle), (parse(period) * cycle));\n    }\n\n    function getTotalInterest() {\n        return getCompoundTotal() - parse(principal);\n    }\n\n    function round(num: number) {\n        return Math.round((num + Number.EPSILON) * 100) / 100\n    }\n\n    const handleChangeCurrency = (currency: string) => {\n        setCurrency(currency);\n    }\n\n    return (\n        <CalculatorContainer>\n            <CalculatorHeader />\n            <CalculatorRow>\n                <CalculatorRowLabel htmlFor=\"principal\">\n                    <FormattedMessage defaultMessage=\"투자 원금\" id=\"calculator.input.label.principal\"></FormattedMessage>\n                </CalculatorRowLabel>\n                <TextField\n                    label=''\n                    name=\"principal\"\n                    pattern=\"[0-9]*\"\n                    type=\"number\"\n                    value={principal}\n                    onChange={handlePrincipalChange} />\n                <CurrencySelector \n                    currency={currency}\n                    handleChangeCurrency={handleChangeCurrency} />\n            </CalculatorRow>\n            <CalculatorRow>\n                <CalculatorRowLabel htmlFor=\"annualInterestRate\">\n                    <FormattedMessage defaultMessage=\"연 이자율(%)\" id=\"calculator.input.label.annualInterestRate\"></FormattedMessage>\n                </CalculatorRowLabel>\n                <TextField\n                    label=''\n                    name=\"annualInterestRate\"\n                    type=\"number\"\n                    value={annualInterestRate}\n                    onChange={handleAnnualInterestRateChange} />\n            </CalculatorRow>\n            <CalculatorRow>\n                <CalculatorRowLabel htmlFor=\"frequency\">\n                    <FormattedMessage defaultMessage=\"복리계산빈도\" id=\"calculator.input.label.frequency\"></FormattedMessage>\n                </CalculatorRowLabel>\n                <Select\n                    label=''\n                    name=\"frequency\"\n                    options={FrequencyOptions}\n                    value={frequency}\n                    onChange={handleFrequencyChange} />\n            </CalculatorRow>\n            <CalculatorRow>\n                <CalculatorRowLabel htmlFor=\"period\">\n                    <FormattedMessage defaultMessage=\"기간 (년)\" id=\"calculator.input.label.period\"></FormattedMessage>\n                </CalculatorRowLabel>\n                <TextField\n                    label=''\n                    name=\"period\"\n                    type=\"number\"\n                    pattern=\"[0-9]*\"\n                    value={period}\n                    onChange={handlePeriodChange} />\n            </CalculatorRow>\n            <CalculatorRow>\n                <CalculatorResultRow>\n                    <FormattedMessage defaultMessage=\"만기지급금액 : \" id=\"calculator.result.label.compoundTotal\"></FormattedMessage>\n                    <FormattedNumber value={round(getCompoundTotal())} style=\"currency\" currency={currency}></FormattedNumber>\n                </CalculatorResultRow>\n                <CalculatorResultRow>\n                    <FormattedMessage defaultMessage=\"원금 : \" id=\"calculator.result.label.principal\"></FormattedMessage>\n                    <FormattedNumber value={parse(principal)} style=\"currency\" currency={currency}></FormattedNumber>\n                </CalculatorResultRow>\n                <CalculatorResultRow>\n                    <FormattedMessage defaultMessage=\"이자 : \" id=\"calculator.result.label.totalInterest\"></FormattedMessage>\n                    <FormattedNumber value={round(getTotalInterest())} style=\"currency\" currency={currency}></FormattedNumber>\n                </CalculatorResultRow>\n            </CalculatorRow>\n        </CalculatorContainer>\n    );\n}\n\nexport default Calculator;","import React, { useState, useCallback } from 'react';\nimport { Select } from '@shopify/polaris';\nimport { useIntl, defineMessages } from 'react-intl';\n\nconst languageMessages = defineMessages({\n    ko: {\n        id: 'language.ko',\n        defaultMessage: '한국어',\n    },\n    en: {\n        id: 'language.en',\n        defaultMessage: '영어',\n    },\n});\n\ninterface LanguageSelectorProps {\n    lang: string | undefined;\n    handleChangeLanguage: ((selected: string) => void) | undefined;\n}\n\nconst LanguageSelector = (props: LanguageSelectorProps) => {\n    const intl = useIntl();\n    const LanguageOptions = [\n        { label: intl.formatMessage(languageMessages.en), value: 'en' },\n        { label: intl.formatMessage(languageMessages.ko), value: 'ko' },\n    ]\n\n    return (\n        <Select\n            label=''\n            name=\"language\"\n            options={LanguageOptions}\n            value={props.lang}\n            onChange={props.handleChangeLanguage} />\n    )\n}\n\nexport default LanguageSelector;","const Messages: { [key: string]: any } = {\n    ko: require('./ko.json'),\n    en: require('./en.json'),\n    defaultMessages: require('./defaultMessages.json')\n}\n\nexport default Messages;","import React from 'react';\nimport styled from 'styled-components';\nimport { IntlProvider } from 'react-intl';\nimport Calculator from './components/Calculator';\nimport LanguageSelector from './components/LanguageSelector';\nimport Messages from './locales';\n\nconst Container = styled.div`\n  margin: 0 auto;\n  padding: 12px;\n  max-width: 400px;\n  text-align: center;\n`;\n\nfunction App() {\n  const [lang, setLang] = React.useState(navigator.language.slice(0, 2));\n  const handleChangeLanguage = (lang: string) => {\n    setLang(lang);\n  }\n\n  return (\n    <IntlProvider\n      locale={lang}\n      messages={Messages[lang]}>\n      <Container>\n        <Calculator />\n        <LanguageSelector\n          lang={lang}\n          handleChangeLanguage={handleChangeLanguage} />\n      \n      </Container>\n    </IntlProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@shopify/polaris/styles.css';\nimport './index.css';\nimport enTranslations from '@shopify/polaris/locales/en.json';\nimport { AppProvider } from '@shopify/polaris';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <AppProvider i18n={enTranslations}>\n        <App />\n      </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}